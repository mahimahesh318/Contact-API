//bodyparser alternative

import express from 'express';

const app = express();

app.use(express.json()); // For parsing application/json
app.use(express.urlencoded({ extended: true })); // For parsing application/x-www-form-urlencoded



Tokens and cookies are both used for authentication and session management in web applications, but they differ significantly in how they work and what they store.

**Tokens:**

* **Definition:** A token is a string of characters that acts as a credential to verify the identity of a user.  They are typically generated by a server and sent to the client.  A token often contains information about the user (e.g., user ID, roles, permissions) and a unique identifier.  Crucially, they are *not* stored on the client's browser; instead, the client includes the token in subsequent requests to the server.

* **Usage:**
    * **Authentication:**  The server verifies the token before granting access to protected resources.  This is typically done by checking the token's signature and validity.
    * **Authorization:** Tokens often contain claims that specify what resources a user can access. The server uses these claims to control access, ensuring that only authorized users can access specific data or perform certain actions.
    * **Statelessness:**  Tokens enable stateless applications.  The server doesn't need to maintain any session data on the server side.  Each request is validated independently using the token.
    * **Security:**  Tokens are generally more secure than cookies because they are not stored directly on the client.  If a token is compromised, the attacker cannot directly access other tokens or data from the browser.
    * **Scalability:**  Tokens are often better suited for highly scalable applications because the server doesn't need to maintain state for each user.


* **Examples:** JSON Web Tokens (JWTs) are a popular token-based authentication standard.  They're widely used in modern web applications.


**Cookies:**

* **Definition:** Cookies are small pieces of data that a website stores on the user's computer.  They are stored in the browser and sent back to the server with subsequent requests.  Cookies are typically used to store information about the user's session, such as login status, preferences, or shopping cart items.

* **Usage:**
    * **Session Management:** Cookies are commonly used to maintain a user's session across multiple requests.  The server sets a cookie when a user logs in.  Subsequent requests include the cookie, allowing the server to identify the user.
    * **Personalization:** Cookies can store user preferences, like language settings or theme choices.
    * **Tracking:**  Cookies can be used to track user behavior on a website, but this raises privacy concerns.
    * **Vulnerability:**  Cookies are stored on the client-side. If a cookie is compromised (e.g., through a cross-site scripting attack), the attacker can potentially gain access to sensitive session information.


* **Examples:**  Session cookies are commonly used to maintain user sessions.


**Key Differences Summarized:**

| Feature | Tokens | Cookies |
|---|---|---|
| **Storage** | On the server, sent with requests | On the client (browser) |
| **Security** | Generally more secure | Potentially less secure |
| **Statelessness** | Enables stateless applications | Typically not stateless |
| **Scalability** | Often better for scalability | Can impact scalability in some cases |
| **Use Cases** | Authentication, authorization, security | Session management, personalization |


**In short:**

* Use tokens for authentication and authorization, especially in modern, secure applications.
* Use cookies for session management and storing less sensitive user data, but be mindful of security implications.

Often, a combination of tokens and cookies is used: tokens for authentication and cookies for storing session-related data that doesn't need to be kept secret.  JWTs are often used in conjunction with cookies to store session data in a secure way.



JWT (JSON Web Token) is a compact, URL-safe means of representing claims securely between two parties.  It's a way to transmit information securely without needing to pass a username and password on every request.

Definition:

A JWT is a string composed of three parts, separated by dots (.):

Header: Contains metadata about the token, typically including the algorithm used to create it. Example: {"alg": "HS256", "typ": "JWT"}
Payload: Contains the claims (information) about the authenticated entity. Example: {"sub": "12345", "name": "John Doe", "exp": 1678886400}
Signature: A cryptographic signature created using a secret key, to verify the token's integrity and prevent tampering.

